{
  "_args": [
    [
      {
        "raw": "gulp-rsync@0.0.8",
        "scope": null,
        "escapedName": "gulp-rsync",
        "name": "gulp-rsync",
        "rawSpec": "0.0.8",
        "spec": "0.0.8",
        "type": "version"
      },
      "C:\\Users\\Andrzej\\Downloads\\myWWW\\NewsPaper"
    ]
  ],
  "_from": "gulp-rsync@0.0.8",
  "_id": "gulp-rsync@0.0.8",
  "_inCache": true,
  "_location": "/gulp-rsync",
  "_nodeVersion": "6.10.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gulp-rsync-0.0.8.tgz_1495419039015_0.32563003804534674"
  },
  "_npmUser": {
    "name": "ebaskoro",
    "email": "eki@baskoro.org"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "xtend": "4.0.1"
  },
  "_requested": {
    "raw": "gulp-rsync@0.0.8",
    "scope": null,
    "escapedName": "gulp-rsync",
    "name": "gulp-rsync",
    "rawSpec": "0.0.8",
    "spec": "0.0.8",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-rsync/-/gulp-rsync-0.0.8.tgz",
  "_shasum": "b3e64835cd6059a4eb121ad58ff71746b4d898cc",
  "_shrinkwrap": null,
  "_spec": "gulp-rsync@0.0.8",
  "_where": "C:\\Users\\Andrzej\\Downloads\\myWWW\\NewsPaper",
  "author": {
    "name": "Jerry Su",
    "email": "email@jerrysu.me"
  },
  "bugs": {
    "url": "https://github.com/jerrysu/gulp-rsync/issues"
  },
  "dependencies": {
    "better-assert": "^1.0.1",
    "gulp-util": "^3.0.0",
    "lodash.every": "^2.4.1",
    "lodash.isstring": "^2.4.1",
    "through2": "^0.6.1"
  },
  "description": "Rsync tasks for deploying gulp file structures",
  "devDependencies": {
    "chai": "^1.9.1",
    "mocha": "^1.21.4"
  },
  "directories": {},
  "dist": {
    "shasum": "b3e64835cd6059a4eb121ad58ff71746b4d898cc",
    "tarball": "https://registry.npmjs.org/gulp-rsync/-/gulp-rsync-0.0.8.tgz"
  },
  "gitHead": "8b0f7d1ee33e7c557be196b7dbf1d404bb5346b5",
  "homepage": "https://github.com/jerrysu/gulp-rsync",
  "keywords": [
    "gulpplugin",
    "rsync",
    "ssh",
    "deploy",
    "deployment"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ebaskoro",
      "email": "eki@baskoro.org"
    },
    {
      "name": "jerrysu",
      "email": "email@jerrysu.me"
    }
  ],
  "name": "gulp-rsync",
  "optionalDependencies": {},
  "readme": "## gulp-rsync\n\nUse the file transferring and syncing capabilities of `rsync` within your Gulp task. `gulp-rsync` calls `rsync` and offers you a subset of options for an easy setup.\n\n### Prerequisites\n\n`rsync` needs to be installed on your machine and must be sitting in your PATH.\n\n### Installation\n\n```\nnpm install gulp-rsync --save-dev\n```\n\n### Usage\n\n```js\nvar gulp = require('gulp');\nvar rsync = require('gulp-rsync');\n\ngulp.task('deploy', function() {\n  return gulp.src('build/**')\n    .pipe(rsync({\n      root: 'build/',\n      hostname: 'example.com',\n      destination: 'path/to/site/'\n    }));\n});\n```\n\nA common parameter set for `rsync` is\n\n```\nrsync -avz ...\n```\n\nThis can be achieved by:\n\n```js\nvar gulp = require('gulp');\nvar rsync = require('gulp-rsync');\n\ngulp.task('deploy', function() {\n  gulp.src('build/**')\n    .pipe(rsync({\n      root: 'build/',\n      hostname: 'example.com',\n      destination: 'path/to/site/',\n      archive: true,\n      silent: false,\n      compress: true\n    }));\n});\n```\n\n**Note** that `rsync` does not synchronize your `build/`-directory if you give it a trailing `/`.\n\n\n### rsync OPTIONS\n\n`rsync-gulp` implements the following options of `rsync`. See the [official documentation](https://rsync.samba.org/documentation.html) for more information.\n\n```\n-a, --archive       archive mode; equals -rlptgoD (no -H,-A,-X)\n-c, --checksum      skip based on checksum, not mod-time & size\n-d, --dirs          transfer directories without recursing\n-e, --rsh=COMMAND   specify the remote shell to use\n-n, --dry-run       perform a trial run with no changes made\n-r, --recursive     recurse into directories\n-t, --times         preserve modification times\n-u, --update        skip files that are newer on the receiver\n-v, --verbose       increase verbosity\n-z, --compress      compress file data during the transfer\n--chmod             affect file and/or directory permissions\n--delete            delete extraneous files from destination dirs\n--exclude=PATTERN   exclude files matching PATTERN\n--include=PATTERN   don't exclude files matching PATTERN\n--port=PORT         specify double-colon alternate port number\n--progress          show progress during transfer\n```\n\n\n### Windows users\n\nWhen you are syncing from Windows to Unix you might encounter permission  errors or issues resulting from these. A reason can be that `rsync` tries to preserve NTFS file attributes in UNIX. This behaviour can be remedied by:\n\n```js\nchmod: \"ugo=rwX\"\n```\n\nSo, if you are running `rsync` on Windows put this option in place.\n\n### API\n\n#### `rsync(options)`\n\n##### `options`\n\n###### `destination`\n\nType: `string`, **Required**\n\nThe destination path. Use `hostname` when using a remote path.\n\n###### `root`\n\nType: `string`, Default: `process.cwd()`\n\nSpecifying a root path changes the path names that are transferred to the\ndestination. The paths piped into `rsync` must be within the root path (or the\nplugin will yell at you).\n\n```js\ngulp.src('build/js/**']).pipe(rsync({destination: '/tmp'}));\n```\n\nThis will create the directory `build` in `/tmp` as well as the directory `js`\nin `/tmp/build`.\n\n```js\ngulp.src('build/js/**']).pipe(rsync({root: 'build', destination: '/tmp'}));\n```\n\nThis will create the directory `js` in `/tmp`.\n\n###### `hostname`\n\nType: `string`\n\nThe hostname of the destination. `rsync` will connect to this hostname using SSH\nalong with configuration in `~/.ssh/config` or SSH keys stored in a keychain.\n\nWhen this is omitted, `rsync` will transfer the content to a local path.\n\n###### `username`\n\nType: `string`\n\nUsed to specify a user for the remote host.\n\n###### `shell`\n\nType: `string`, Compares to: `rsync -e`\n\nTypically, `rsync` is configured to use `ssh` by default, but you may prefer to\nuse `rsh` on a local network.\n\n###### `port`\n\nType: `integer`\n\nUsed to specify an SSH port for the remote host. Note: This will override the\nshell option and force the use `ssh` in `rsync -e ssh --port=PORT`.\n\n###### `archive`\n\nType: `boolean`, Default: `false`, Compares to: `rsync -a`\n\nIf set to `true`, `rsync` will turn on the archive mode which equals `-rlptgoD`:\n\n```\n-r, --recursive  recurse into directories\n-l, --links      copy symlinks as symlinks\n-p, --perms      preserve permissions\n-t, --times      preserve modification times\n-g, --group      preserve group\n-o, --owner      preserve owner (super-user only)\n-D               same as --devices --specials\n--devices        preserve device files (super-user only)\n--specials       preserve special files\n```\n\n\n###### `dryrun`\n\nType: `boolean`, Default: `false`, Compares to: `rsync -n`\n\nIf set to `true`, `rsync` will do everything it does without actually syncing.\n\n\n###### `incremental`\n\nType: `boolean`, Default: `false`, Compares to: `rsync -c`\n\nIf set to `true`, `rsync` will make incremental updates only. rsync will use the checksum of every file to determine whether a file needs to be updated. This will add a delay to the transfer, but will minimize the amount of files\ntransferred each time.\n\n\n\n###### `progress`\n\nType: `boolean`, Default: `false`, Compares to: `rsync --progress`\n\nIf set to `true`, the transfer progress for each file will be displayed in the\nconsole.\n\nThis looks like:\n\n```\n[20:49:53] gulp-rsync: Starting rsync to example.com:/var/www/example.com/html/...\n[20:49:53] gulp-rsync: favicon.ico\n[20:49:53] gulp-rsync:         1150 100%  439.45kB/s    0:00:00 (xfer#1, to-check=12/13)\n[20:49:53] gulp-rsync: index.html\n[20:49:53] gulp-rsync:         2712 100%  101.86kB/s    0:00:00 (xfer#2, to-check=11/13)\n[20:49:53] gulp-rsync: css/style.1afca52f.css\n[20:49:53] gulp-rsync:         1445 100%   54.27kB/s    0:00:00 (xfer#3, to-check=9/13)\n[20:49:53] gulp-rsync: images/photo1.82515393.jpg\n[20:49:53] gulp-rsync:        31878 100%    1.09MB/s    0:00:00 (xfer#7, to-check=3/13)\n[20:49:53] gulp-rsync: images/photo2.2a41e1e3.jpg\n[20:49:53] gulp-rsync:        76988 100%    2.53MB/s    0:00:00 (xfer#9, to-check=1/13)\n[20:49:53] gulp-rsync:  \n[20:49:53] gulp-rsync: sent 2401 bytes  received 2820 bytes  10442.00 bytes/sec\n[20:49:53] gulp-rsync: total size is 114173  speedup is 57.01\n[20:49:53] gulp-rsync: Completed rsync.\n```\n\n###### `relative`\n\nType: `boolean`, Default: `true`, Compares to: `rsync -R`\n\nBy default, `gulp-rsync` will transfer all paths relative to the `root` specified.\nIf you want to transfer assets from multiple paths to a single destination, you\ncan set `relative` to `false`.\n\n```js\ngulp.src(['build/js/**/*.js', 'build/css/**/*.css', 'build/images/**'])\n  .pipe(rsync({\n    hostname: 'example.cdn',\n    destination: '/path/to/all/assets',\n    relative: false\n  }));\n```\n\nThis will transfer all assets (*.js, *.css, and images) into a single directory.\n\n###### `emptyDirectories`\n\nType: `boolean`, Default: `false`, Compares to: `rsync -d`\n\nIf set to `true`, `rsync` will create empty directories.\n\n###### `times`\n\nType: `boolean`, Default: `false`, Compares to: `rsync -t`\n\nPreserves times of the transferred files.\n\n###### `compress`\n\nType: `boolean`, Default: `false`, Compares to: `rsync -z`\n\nCompresses file data during transfer.\n\n###### `recursive`\n\nType: `boolean`, Default: `false`\n\nIf set to `true`, `rsync` will transfer all files and subdirectories recursively.\nThis is not necessary when using glob(s) with `gulp.src()`. However, it can be\ncombined with non-globbed paths to transfer all files:\n\n```\ngulp.src(['build/js', 'build/css', 'build/images'])\n  .pipe(rsync({\n    root: 'build/',\n    destination: 'tmp/',\n    recursive: true\n  }));\n```\n\nThis is the same as:\n\n```\ngulp.src(['build/js/**', 'build/css/**', 'build/images/**'])\n  .pipe(rsync({\n    root: 'build',\n    destination: '/tmp'\n  }));\n```\n\nThe difference is that the actual `rsync` command used in the first example is\nmuch shorter.\n\n###### clean\n\nType: `boolean`, Default: `false`, Compares to: `rsync --delete`\n\nThis must be used with `archive` or `recursive` set to `true`. If set to `true`, this instructs `rsync` to delete all files and directories that are not in the source paths. **Be careful with this option as it could lead to data loss.**\n\n###### `chmod`\n\nType: `string`, Compares to: `rsync --chmod=STRING`\n\nEnables files or directories matching the pattern(s) provided to be excluded\nfrom the transfer. This is probably most useful when `recursive` is set to\n`true` since it is typically better to make these exclusions in `gulp.src()`.\n\n###### `chown`\n\nType: `string`, Compares to: `rsync --chown=STRING`\n\nForces all remote files to be owned by the USER:GROUP provided in the string. If GROUP is empty, the trailing colon may be omitted, but if USER is empty, a leading colon must be supplied. If you're running macOS please check your rsync version with `rsync --version`. The default system version, older than 3.1.0, doesn't support this option. You can fix this by installing a recent version from Brew (`brew install homebrew/dupes/rsync`) or MacPorts (`sudo port install rsync`).\n\n###### `exclude`\n\nType: `string|Array<string>`, Compares to: `rsync --exclude=PATTERN`\n\nEnables files or directories matching the pattern(s) provided to be excluded\nfrom the transfer. This is probably most useful when `recursive` is set to\n`true` since it is typically better to make these exclusions in `gulp.src()`.\n\n###### `include`\n\nType: `string|Array<string>`, `rsync --include=PATTERN`\n\nUsed with `exclude`. This adds exceptions for the exclusions.\n\nFor example:\n\n```\ngulp.src('build')\n  .pipe(rsync({\n    root: 'build',\n    destination: '/tmp',\n    recursive: true,\n    exclude: ['*.css', '*.js'],\n    include: ['*.min.css', '*.min.js']\n  }));\n```\n\nThis will transfer only minified CSS and JS files.\n\n###### `update`\n\nType: `boolean`, Default: `false`, Compares to: `rsync -u`\n\nSkip files that are newer on the receiving end.\n\n###### `silent`\n\nType: `boolean`, Default: `false`, Compares to: `rsync --no-v`\n\nTurns off logging.\n\n###### `links`\n\nType: `boolean`, Default: `false`\n\nEnables creation of symbolic links on the receiving end.\n\n###### `command`\n\nType: `boolean`, Default: `false`\n\nThis is not a `rsync`-option. If set to `true`, `gulp-rsync` shows you the generated `rsync` command in your shell.\n\n#### License\n\n> The MIT License (MIT)\n>\n> Copyright © 2015 Jerry Su, http://jerrysu.me\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of\n> this software and associated documentation files (the “Software”), to deal in\n> the Software without restriction, including without limitation the rights to\n> use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n> the Software, and to permit persons to whom the Software is furnished to do so,\n> subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all\n> copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n> FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n> COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n> IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n> CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jerrysu/gulp-rsync.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.0.8"
}
