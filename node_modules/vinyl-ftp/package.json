{
  "_args": [
    [
      {
        "raw": "vinyl-ftp@^0.6.0",
        "scope": null,
        "escapedName": "vinyl-ftp",
        "name": "vinyl-ftp",
        "rawSpec": "^0.6.0",
        "spec": ">=0.6.0 <0.7.0",
        "type": "range"
      },
      "C:\\Users\\Andrzej\\Downloads\\myWWW\\NewsPaper"
    ]
  ],
  "_from": "vinyl-ftp@>=0.6.0 <0.7.0",
  "_id": "vinyl-ftp@0.6.0",
  "_inCache": true,
  "_location": "/vinyl-ftp",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/vinyl-ftp-0.6.0.tgz_1486302889961_0.122178606223315"
  },
  "_npmUser": {
    "name": "morris4",
    "email": "mb@morrisbrodersen.de"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {
    "clone": "1.0.2",
    "clone-buffer": "1.0.0",
    "cloneable-readable": "1.0.0",
    "is-stream": "1.1.0",
    "remove-trailing-separator": "1.0.2"
  },
  "_requested": {
    "raw": "vinyl-ftp@^0.6.0",
    "scope": null,
    "escapedName": "vinyl-ftp",
    "name": "vinyl-ftp",
    "rawSpec": "^0.6.0",
    "spec": ">=0.6.0 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/vinyl-ftp/-/vinyl-ftp-0.6.0.tgz",
  "_shasum": "2fb43ec4d58a2e4c06b406e569cee9b3aa5df8ca",
  "_shrinkwrap": null,
  "_spec": "vinyl-ftp@^0.6.0",
  "_where": "C:\\Users\\Andrzej\\Downloads\\myWWW\\NewsPaper",
  "author": {
    "name": "Morris Brodersen",
    "email": "mb@morrisbrodersen.de",
    "url": "http://morrisbrodersen.de"
  },
  "bugs": {
    "url": "https://github.com/morris/vinyl-ftp/issues"
  },
  "dependencies": {
    "ftp": "^0.3.8",
    "minimatch": "^3.0.2",
    "object-assign": "^4.1.1",
    "parallel-transform": "^1.1.0",
    "through2": "^2.0.3",
    "vinyl": "^2.0.1"
  },
  "description": "Vinyl adapter for FTP",
  "devDependencies": {
    "istanbul": "^0.4.5",
    "mocha": "^3.2.0",
    "rmdir": "^1.2.0",
    "vinyl-fs": "^2.4.4"
  },
  "directories": {},
  "dist": {
    "shasum": "2fb43ec4d58a2e4c06b406e569cee9b3aa5df8ca",
    "tarball": "https://registry.npmjs.org/vinyl-ftp/-/vinyl-ftp-0.6.0.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "gitHead": "dcb4d542984a11d137a5c6231a274bfce414a5fb",
  "homepage": "https://github.com/morris/vinyl-ftp#readme",
  "keywords": [
    "vinyl",
    "gulp",
    "ftp",
    "deploy",
    "deployment",
    "upload"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "morris4",
      "email": "mb@morrisbrodersen.de"
    }
  ],
  "name": "vinyl-ftp",
  "optionalDependencies": {},
  "readme": "# vinyl-ftp\n\n[![version](https://img.shields.io/npm/v/vinyl-ftp.svg)](https://www.npmjs.com/package/vinyl-ftp)\n[![downloads](https://img.shields.io/npm/dm/vinyl-ftp.svg)](https://www.npmjs.com/package/vinyl-ftp)\n\nBlazing fast vinyl adapter for FTP.\nSupports parallel transfers, conditional transfers, buffered or streamed files, and more.\nOften performs better than your favorite desktop FTP client.\n\n## Usage\n\nNice and gulpy deployment task:\n\n```javascript\nvar gulp = require( 'gulp' );\nvar gutil = require( 'gulp-util' );\nvar ftp = require( 'vinyl-ftp' );\n\ngulp.task( 'deploy', function () {\n\n\tvar conn = ftp.create( {\n\t\thost:     'mywebsite.tld',\n\t\tuser:     'me',\n\t\tpassword: 'mypass',\n\t\tparallel: 10,\n\t\tlog:      gutil.log\n\t} );\n\n\tvar globs = [\n\t\t'src/**',\n\t\t'css/**',\n\t\t'js/**',\n\t\t'fonts/**',\n\t\t'index.html'\n\t];\n\n\t// using base = '.' will transfer everything to /public_html correctly\n\t// turn off buffering in gulp.src for best performance\n\n\treturn gulp.src( globs, { base: '.', buffer: false } )\n\t\t.pipe( conn.newer( '/public_html' ) ) // only upload newer files\n\t\t.pipe( conn.dest( '/public_html' ) );\n\n} );\n```\n\nWithout Gulp:\n\n```javascript\nvar fs = require( 'vinyl-fs' );\nvar ftp = require( 'vinyl-ftp' );\n\nvar conn = new ftp( /* ... */ );\n\nfs.src( [ './src/**' ], { buffer: false } )\n\t.pipe( conn.dest( '/dst' ) );\n```\n\n*Remember not to push FTP credentials to public repos!*\n\n\n## API\n\n`var ftp = require( 'vinyl-ftp' )`\n\n### ftp.create( config )\n\nReturn a new `vinyl-ftp` instance with the given config. Config options:\n\n- __host:__        FTP host,     default is localhost\n- __user:__        FTP user,     default is anonymous\n- __pass[word]:__  FTP password, default is anonymous@\n- __port:__        FTP port,     default is 21\n- __log:__         Log function, default is null\n- __timeOffset:__  Offset server time by this number of minutes, default is 0\n- __parallel:__    Number of parallel transfers, default is 3\n- __maxConnections:__ Maximum number of connections, should be greater or\nequal to \"parallel\". Default is 5, or the parallel setting.\nDon't worry about setting this too high, vinyl-ftp\nrecovers from \"Too many connections\" errors nicely.\n- __reload:__      Clear caches before (each) stream, default is false\n- __idleTimeout:__ Time to keep idle FTP connections (milliseconds), default is 100\n- __debug:__       A debug callback that gets extensive debug information, default is null\n- __secure:__      Set `true` for secured FTP connections\n- __secureOptions:__ Set `{ rejectUnauthorized: false }` for self-signed or expired secure FTP connections\n\nYou can override `parallel` and `reload` per stream in their `options`.\n\n<hr>\n\n`var conn = ftp.create( config )`\n\n### conn.src( globs[, options] ) <small>STREAM</small>\n\nReturns a vinyl file stream that emits remote files matched by the given\nglobs.\nThe remote files have a `file.ftp` property containing remote information.\nPossible options:\n\n- __cwd:__ Set as file.cwd, default is `/`.\n- __base:__ Set as file.base, default is glob beginning. This is used to determine the file names when saving in .dest().\n- __since:__ Only emit files modified after this date.\n- __buffer:__ Should the file be buffered (complete download) before emitting? Default is true.\n- __read:__ Should the file be read? Default is true. False will emit null files.\n\nGlob-related options are documented at [minimatch](https://www.npmjs.com/package/minimatch).\n\n<hr>\n\n### conn.dest( remoteFolder[, options] ) <small>STREAM</small>\n\nReturns a transform stream that transfers input files to a remote folder.\nAll directories are created automatically.\nPasses input files through.\n\n### conn.mode( remoteFolder, mode[, options] ) <small>STREAM</small>\n\nReturns a transform stream that sets remote file permissions for each file.\n`mode` must be a string between '0000' and '0777'.\n\n### conn.newer( remoteFolder[, options] ) <small>STREAM</small>\n\nReturns a transform stream which filters the input for files\nwhich are newer than their remote counterpart.\n\n### conn.differentSize( remoteFolder[, options] ) <small>STREAM</small>\n\nReturns a transform stream which filters the input for files\nwhich have a different file size than their remote counterpart.\n\n### conn.newerOrDifferentSize( remoteFolder[, options] ) <small>STREAM</small>\n\nSee above.\n\n### conn.filter( remoteFolder, filter[, options] ) <small>STREAM</small>\n\nReturns a transform stream that filters the input using a callback.\nThe callback should be of this form:\n\n```javascript\nfunction ( localFile, remoteFile, callback ) {\n\n\t// localFile and remoteFile are vinyl files.\n\t// Check remoteFile.ftp for remote information.\n\t// Decide wether localFile should be emitted and call callback with boolean.\n\t// callback is a function( error, emit )\n\n\tcallback( null, emit );\n\n}\n```\n\n### conn.delete( path, cb ) <small>CALLBACK</small>\n\nDeletes a file.\n\n### conn.rmdir( path, cb ) <small>CALLBACK</small>\n\nRemoves a directory, recursively.\n\n### conn.clean( globs, local[, options] ) <small>STREAM</small>\n\nGlobs remote files, tests if they are locally available at `<local>/<remote.relative>` and removes them if not.\n\n## Development\n\n- Run tests with `CONFIG=test/config/yourserver.json npm test`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/morris/vinyl-ftp.git"
  },
  "scripts": {
    "test": "istanbul cover node_modules/mocha/bin/_mocha test"
  },
  "version": "0.6.0"
}
